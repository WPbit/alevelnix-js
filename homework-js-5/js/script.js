// 1. Скрыть элемент по нажатию кнопки
// Добавьте JavaScript к кнопке button, чтобы при нажатии элемент <div id="text"> исчезал.
// в index.html


// 2. Какой обработчик запустится?
// В переменной button находится кнопка. Изначально на ней нет обработчиков.
// Который из обработчиков запустится? Что будет выведено при клике после выполнения кода?
/*
button.addEventListener("click", () => alert("1"));
    Ответ: Обработчик сработает и метод начнет вешать остальные на данную функцию и выведет 1
button.removeEventListener("click", () => alert("1"));
    Ответ: Данный обработчик не сможет удалиться данным методом, т.к. не указывает на конкретную функцию
button.onclick = () => alert(2);
    Ответ: Событие по клику сработает и выведет 2 после того как отработает первый
    Думал: не сработает и не выведет ничего.
*/


// 3. Скопировать и отсортировать массив
// У нас есть массив строк arr. Нужно получить отсортированную копию, но оставить arr неизменённым.
// Создайте функцию copySorted(arr), которая будет возвращать такую копию.
/**
 *
 * @param arr
 * @returns {*[]}
 */
/*
function copySorted(arr)
{
    let new_arr = [];
    for (values of arr) {
        new_arr.unshift(values);
    }
    return new_arr.sort();
}
let arr = ["HTML", "JavaScript", "CSS"];
let sorted = copySorted(arr);
alert( sorted ); // CSS, HTML, JavaScript
alert( arr ); // HTML, JavaScript, CSS (без изменений)
*/


// 4. Вычислить факториал
// Факториал натурального числа – это число, умноженное на "себя минус один", затем на
// "себя минус два", и так далее до 1. Факториал n обозначается как n!
// Определение факториала можно записать как:
// n! = n * (n - 1) * (n - 2) * ...*1
// Примеры значений для разных n:
// 1! = 1
// 2! = 2 * 1 = 2
// 3! = 3 * 2 * 1 = 6
// 4! = 4 * 3 * 2 * 1 = 24
// 5! = 5 * 4 * 3 * 2 * 1 = 120
// Задача – написать функцию factorial(n), которая возвращает n!, используя рекурсию.
// alert( factorial(5) ); // 120
// P.S. Подсказка: n! можно записать как n * (n-1)! Например: 3! = 3*2! = 3*2*1! = 6
/**
 *
 * @param n
 * @returns {number|*}
 */
/*
function factorial(n)
{
    if (n === 1) {
        return  n;
    } else  {
        return n * factorial(n - 1);
    }
}
alert( factorial(5) );
*/


// 5. Числа Фибоначчи
// Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2. То
// есть, следующее число получается как сумма двух предыдущих.
// Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5,
// 8, 13, 21....
// Числа Фибоначчи тесно связаны с золотым сечением и множеством природных
// явлений вокруг нас.
// Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.
// Пример работы:
// function fib(n) { /* ваш код */ }
// alert(fib(3)); // 2
// alert(fib(7)); // 13
// alert(fib(77)); // 5527939700884757
// P.S. Все запуски функций из примера выше должны работать быстро. Вызов fib(77)
// должен занимать не более доли секунды.
/**
 *
 * @param n
 * @returns {number}
 */
/*
function fib(n)
{
    let result = 1;
    let num1 = 1;
    let num2 = 1;
    if (n < 3) {
        return result;
    } else {
        for (let i = 3; i <= n; i++) {
            result = num1 + num2;
            num1 = num2;
            num2 = result;
        }
        return result;
    }
}
alert(fib(77));
*/
